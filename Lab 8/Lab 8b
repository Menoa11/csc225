public class Heapsort {

    private static void maxHeapify(int[] A, int i, int heapSize) {
            int largest = i;
            int left = 2 * i;
            int right = 2 * i + 1;
            
            if (left <= heapSize && A[left] > A[largest]) {
                largest = left;
            }
            
            if (right <= heapSize && A[right] > A[largest]) {
                largest = right;
            }
            
            // If largest is not the root, swap and recursively heapify affected subtree
            if (largest != i) {
                swap(A, i, largest);
                maxHeapify(A, largest, heapSize);
            }
        }
        
        private static void swap(int[] A, int i, int j) {
            int temp = A[i];
            A[i] = A[j];
            A[j] = temp;
        }
}        